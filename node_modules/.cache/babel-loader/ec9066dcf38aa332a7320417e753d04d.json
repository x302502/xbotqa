{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macintoshhd/Desktop/xbottest/xbotqa/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/macintoshhd/Desktop/xbottest/xbotqa/src/page/LevelTwoOnePage.js\";\nimport React, { Component } from 'react';\n\nvar LevelTwoOnePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LevelTwoOnePage, _Component);\n\n  function LevelTwoOnePage(props) {\n    var _this;\n\n    _classCallCheck(this, LevelTwoOnePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LevelTwoOnePage).call(this, props));\n    _this.loadData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var options, res, listResult, listCriteria, listIndices;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              options = {\n                'method': 'GET',\n                'Content-Type': 'application/json'\n              };\n              _context.next = 4;\n              return fetch('https://xbot.com.vn/standards.json', options);\n\n            case 4:\n              res = _context.sent;\n\n              if (!res) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              listResult = _context.sent;\n              listCriteria = [];\n              listIndices = [];\n              listResult.map(function (item) {\n                var tempList = item.criteria;\n                listCriteria = listCriteria.concat(tempList);\n                tempList.map(function (criteria) {\n                  listIndices = listIndices.concat(criteria.indices);\n                });\n              });\n\n              _this.setState({\n                listCriteria: listCriteria,\n                listIndices: listIndices\n              });\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 15]]);\n    }));\n\n    _this.handleChangeTexOne = function (event) {\n      _this.setState({\n        inputOne: event.target.value\n      });\n    };\n\n    _this.handleChangeTexTwo = function (event) {\n      _this.setState({\n        inputOne: event.target.value\n      });\n    };\n\n    _this.resultQuestionOne = function () {\n      var _this$state = _this.state,\n          listCriteria = _this$state.listCriteria,\n          inputOne = _this$state.inputOne;\n      var result = listCriteria.find(function (x) {\n        return x.name.toString().includes(inputOne);\n      });\n      console.log(result);\n\n      _this.setState({\n        resOne: result\n      });\n    };\n\n    _this.resultQuestionTwo = function () {\n      var _this$state2 = _this.state,\n          inputTwo = _this$state2.inputTwo,\n          listIndices = _this$state2.listIndices;\n\n      if (inputTwo === '') {\n        _this.setState({\n          resTwo: listIndices\n        });\n      } else {\n        _this.setState({\n          resTwo: listIndices.filter(function (x) {\n            return x.level === inputTwo;\n          })\n        });\n      }\n    };\n\n    _this.state = {\n      listCriteria: [],\n      listIndices: [],\n      inputOne: '',\n      resOne: null,\n      inputTwo: '',\n      resTwo: []\n    };\n    return _this;\n  }\n\n  _createClass(LevelTwoOnePage, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.loadData();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \" QUESTION 1: \"), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"search\",\n        value: this.state.inputOne,\n        onChange: this.handleChangeTexOne,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.resultQuestionOne,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \" View Result \"), React.createElement(\"h2\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Result\"), this.state.resOne && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"  \", this.state.resOne.key, \" \"), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \" \", this.state.resOne.name, \" \"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \" QUESTION 2: \"), React.createElement(\"input\", {\n        type: \"number\",\n        placeholder: \"level\",\n        value: this.state.inputTwo,\n        onChange: this.handleChangeTexTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.resultQuestionTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \" View Result \"), React.createElement(\"h2\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Result\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.resTwo.map(function (item, index) {\n        return React.createElement(\"p\", {\n          key: index.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Name:  \", item.name, \" -  Level: \", item.level);\n      })), this.state.resTwo.length === 0 && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \" Not find group level \"))));\n    }\n  }]);\n\n  return LevelTwoOnePage;\n}(Component);\n\nexport { LevelTwoOnePage as default };","map":{"version":3,"sources":["/Users/macintoshhd/Desktop/xbottest/xbotqa/src/page/LevelTwoOnePage.js"],"names":["React","Component","LevelTwoOnePage","props","loadData","options","fetch","res","json","listResult","listCriteria","listIndices","map","item","tempList","criteria","concat","indices","setState","console","log","handleChangeTexOne","event","inputOne","target","value","handleChangeTexTwo","resultQuestionOne","state","result","find","x","name","toString","includes","resOne","resultQuestionTwo","inputTwo","resTwo","filter","level","color","key","index","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n\nexport default class LevelTwoOnePage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      listCriteria: [],\n      listIndices: [],\n      inputOne: '',\n      resOne: null,\n      inputTwo: '',\n      resTwo: []\n    }\n  }\n  async componentWillMount() {\n    await this.loadData();\n  }\n  loadData = async () => {\n    try {\n      const options = {\n        'method': 'GET',\n        'Content-Type': 'application/json'\n      }\n      let res = await fetch('https://xbot.com.vn/standards.json', options)\n      if (res) {\n        let listResult = await res.json();\n        let listCriteria = [];\n        let listIndices = [];\n        listResult.map(item => {\n          let tempList = item.criteria;\n          listCriteria = listCriteria.concat(tempList);\n          tempList.map(criteria => {\n            listIndices = listIndices.concat(criteria.indices);\n          })\n        });\n\n\n        this.setState({\n          listCriteria: listCriteria,\n          listIndices: listIndices\n        })\n      }\n    } catch (error) {\n      console.log(error);\n\n    }\n  }\n  handleChangeTexOne = (event) => {\n    this.setState({\n      inputOne: event.target.value\n    })\n  }\n  handleChangeTexTwo = (event) => {\n    this.setState({\n      inputOne: event.target.value\n    })\n  }\n\n  resultQuestionOne = () => {\n    const { listCriteria, inputOne } = this.state;\n\n\n    let result = listCriteria.find(x => x.name.toString().includes(inputOne));\n    console.log(result);\n    this.setState({\n      resOne: result\n    })\n  }\n  resultQuestionTwo = () => {\n    const { inputTwo,listIndices } = this.state;\n    if(inputTwo === '') {\n      this.setState( {\n        resTwo: listIndices\n      })\n    } else {\n      this.setState( {\n        resTwo: listIndices.filter(x=> x.level === inputTwo)\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div>\n          <h1> QUESTION 1: </h1>\n          <input\n            type=\"text\"\n            placeholder=\"search\"\n            value={this.state.inputOne}\n            onChange={this.handleChangeTexOne} />\n          <button onClick={this.resultQuestionOne}> View Result </button>\n\n          <h2 style={{ color: 'red' }}>\n            Result\n          </h2>\n          {this.state.resOne &&\n            (\n              <div>\n                <h5>  {this.state.resOne.key} </h5>\n                <h5> {this.state.resOne.name} </h5>\n              </div>\n            )\n          }\n        </div>\n\n         <div>\n          <h1> QUESTION 2: </h1>\n          <input\n            type=\"number\"\n            placeholder=\"level\"\n            value={this.state.inputTwo}\n            onChange={this.handleChangeTexTwo} />\n          <button onClick={this.resultQuestionTwo}> View Result </button>\n\n          <h2 style={{ color: 'red' }}>\n            Result\n          </h2>\n\n           <div>\n                    {this.state.resTwo.map((item, index) => {\n                        return (\n                            <p key={index.toString()}>\n                                Name:  {item.name} -  Level: {item.level}\n                            </p>\n                        )\n                    })}\n                </div>\n          { this.state.resTwo.length === 0 &&\n            (\n              <div>\n                <h5> Not find group level </h5>\n              </div>\n            )\n          }\n        </div>\n      </div>\n    )\n\n  }\n}"]},"metadata":{},"sourceType":"module"}